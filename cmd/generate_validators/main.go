package main

import (
	"go/ast"
	"go/parser"
	"go/token"
	"html/template"
	"log"
	"os"
	"path/filepath"
)

// Template for the auto-generated registration code
const tpl = `// Code generated by go generate; DO NOT EDIT.
package validators

import "reflect"

func init() {
	{{- range .Structs }}
	RegisterValidator(reflect.TypeOf({{ . }}{}).Name(), {{ . }}{})
	{{- end }}
}
`

func main() {
	// Get the current working directory
	wd, err := os.Getwd()
	if err != nil {
		log.Fatalf("Failed to get working directory: %v", err)
	}

	// Resolve the absolute path to the validators directory
	validatorsPath, err := filepath.Abs(filepath.Join(wd, "..", "validators"))
	if err != nil {
		log.Fatalf("Failed to resolve absolute path: %v", err)
	}

	log.Printf("Current working directory: %s", wd)
	log.Printf("Parsing validators directory at: %s", validatorsPath)

	// Parse the validators directory using the absolute path
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, validatorsPath, nil, parser.AllErrors)
	if err != nil {
		log.Fatalf("Failed to parse package at %s: %v", validatorsPath, err)
	}

	// Collect all struct names
	structs := []string{}
	for _, pkg := range pkgs {
		for _, file := range pkg.Files {
			for _, decl := range file.Decls {
				gen, ok := decl.(*ast.GenDecl)
				if !ok || gen.Tok != token.TYPE {
					continue
				}

				for _, spec := range gen.Specs {
					typeSpec, ok := spec.(*ast.TypeSpec)
					if !ok {
						continue
					}

					// Check if the type is a struct
					if _, ok := typeSpec.Type.(*ast.StructType); ok {
						structs = append(structs, typeSpec.Name.Name)
					}
				}
			}
		}
	}

	// Generate the output file using the absolute path
	outputFilePath := filepath.Join(validatorsPath, "auto_generated.go")
	file, err := os.Create(outputFilePath)
	if err != nil {
		log.Fatalf("Failed to create output file: %v", err)
	}
	defer file.Close()

	// Use the template to generate the file
	tmpl, err := template.New("validators").Parse(tpl)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	err = tmpl.Execute(file, struct {
		Structs []string
	}{
		Structs: structs,
	})
	if err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	log.Printf("Auto-generated validator registration completed at: %s", outputFilePath)
}
